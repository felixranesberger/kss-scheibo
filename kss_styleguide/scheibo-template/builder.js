/* jshint node: true */
'use strict';

let KssBuilderHandlebars = require('kss/builder/handlebars');

class KssBuilderScheibo extends KssBuilderHandlebars {

	constructor() {
		super();

		this.addOptionDefinitions({
			scriptModules: {
				group: 'Style guide:',
				string: true,
				describe: 'Inject scripts with type module into body'
			}
		});

		this.addOptionDefinitions({
			requirejs: {
				group: 'Style guide:',
				string: true,
				describe: 'Add RequireJs as global option and in every single fullscreen mode.'
			}
		});

		this.addOptionDefinitions({
			bodyclass: {
				group: 'Style guide:',
				string: true,
				describe: 'Add a global body class and in every single fullscreen mode.'
			}
		});

		this.addOptionDefinitions({
			htmllang: {
				group: 'Style guide:',
				string: true,
				describe: 'Change the global lang attribute.'
			}
		});
	}

	prepare(styleGuide) {
		return super.prepare(styleGuide).then(styleGuide => {
			require('../../lib/modules/colors')(this.Handlebars);
			require('../../lib/modules/modifierRequireJs')(this.Handlebars);
			require('../../lib/modules/modifierScriptModule')(this.Handlebars);
			require('../../lib/modules/modifierBodyClass')(this.Handlebars);
			require('../../lib/modules/modifierInsertCode')(this.Handlebars);
			require('../../lib/modules/modifierFullscreen')(this.Handlebars, this.options);
			require('../../lib/modules/modifierInsertSection')(this.Handlebars);
			require('../../lib/modules/modifierHtmlLang')(this.Handlebars);
			require('../../lib/modules/wrapper')(this.Handlebars);
			return styleGuide;
		});
	}

	/**
	 * Add html tag generated by KSS to context
	 *
	 * @param {Object} context Additional context to give to the template when
	 *   it is rendered.
	 */
	prepareContext(context) {
		// Create the HTML to load the optional CSS and JS (if a sub-class hasn't already built it.)
		// istanbul ignore else
		if (typeof context.styles === 'undefined') {
			context.styles = '';
			for (let key in this.options.css) {
				// istanbul ignore else
				if (this.options.css.hasOwnProperty(key)) {
					context.styles = context.styles + '<link rel="stylesheet" href="' + this.options.css[key] + '"/>\n';
				}
			}
		}
		// istanbul ignore else
		if (typeof context.scripts === 'undefined') {
			context.scripts = '';
			for (let key in this.options.js) {
				// istanbul ignore else
				if (this.options.js.hasOwnProperty(key)) {
					context.scripts = context.scripts + '<script src="' + this.options.js[key] + '"></script>\n';
				}
			}
		}
	}
}

module.exports = KssBuilderScheibo;
